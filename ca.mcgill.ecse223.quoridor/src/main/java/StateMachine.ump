namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;

class PawnBehavior {

   0..1 -> 0..1 Game currentGame;
   0..1 -> 0..1 Player player;
	
 
  // TODO implement state machine of pawn
 PawnSM{
   
    Playing{
       finishGame -> Finished;
           
       NorthSouth{
      
          Setup{
              startGame [getPlayer().getGameAsWhite.equals(getCurrentGame())]-> SouthEdge;
          }
      
          SouthEdge{
              stepUp [isLegalMove(MoveDirection.North)]-> SouthBorder;     
              jumpUp [isLegalJump(MoveDirection.North)] -> MiddleNS;
          }
      
          SouthBorder{
              stepUp [isLegalMove(MoveDirection.North)]-> MiddleNS;
              stepDown [isLegalMove(MoveDirection.South)]-> SouthEdge;
              jumpUp [isLegalJump(MoveDirection.North)] -> MiddleNS;
          }
      
        MiddleNS{
              stepUp   [isLegalMove(MoveDirection.North) && getCurrentPawnRow() ==3] -> NorthBorder;
              jumpUp  [isLegalJump(MoveDirection.North) && getCurrentPawnRow() ==3] -> NorthEdge;
              jumpUp  [isLegalJump(MoveDirection.North) && getCurrentPawnRow() ==4] -> NorthBorder;
              stepUp [isLegalMove(MoveDirection.North) && getCurrentPawnRow()  >=4 && getCurrentPawnRow()  <=7]-> MiddleNS;
              stepDown [isLegalMove(MoveDirection.South) && getCurrentPawnRow() ==7] -> SouthBorder;
              jumpDown [isLegalJump(MoveDirection.South) && getCurrentPawnRow() ==7] -> SouthEdge;
              jumpDown [isLegalJump(MoveDirection.South) && getCurrentPawnRow() ==6] -> SouthBorder;
              stepDown[isLegalMove(MoveDirection.South) && getCurrentPawnRow()  >=3 && getCurrentPawnRow()  <=6] -> MiddleNS;
              jumpUp[isLegalJump(MoveDirection.North) && getCurrentPawnRow()  >=5 && getCurrentPawnRow()  <=7] -> MiddleNS;
              jumpDown[isLegalJump(MoveDirection.South) && getCurrentPawnRow()  >=3 && getCurrentPawnRow()  <=5] -> MiddleNS;
        }
      
          NorthBorder{
              stepUp  [isLegalMove(MoveDirection.North) ] -> NorthEdge;  
              stepDown [isLegalMove(MoveDirection.South)]->MiddleNS;
              jumpDown [isLegalJump(MoveDirection.South)] -> MiddleNS;
         }
        
        NorthEdge{ 
            stepDown [isLegalMove(MoveDirection.South)] ->NorthBorder;
            jumpDown [isLegalJump(MoveDirection.South)]-> MiddleNS;
        }
      }
        
      ||
  
      EastWest{
   
          Setup{
                startGame -> MiddleEW;
          }
      
        WestEdge{
                stepRight [isLegalMove(MoveDirection.East)]-> WestBorder;
                jumpRight [isLegalJump(MoveDirection.East)]-> MiddleEW;
        }
    
        WestBorder{
              stepRight [isLegalMove(MoveDirection.East)]-> MiddleEW;
              jumpRight [isLegalJump(MoveDirection.East)]-> MiddleEW;
              stepLeft [isLegalMove(MoveDirection.West)]-> WestEdge;
        }    
    
        MiddleEW{
       
            stepLeft [isLegalMove(MoveDirection.West) && getCurrentPawnColumn()==3] -> WestBorder;
            jumpLeft [isLegalJump(MoveDirection.West) && getCurrentPawnColumn()==3] -> WestEdge;
            jumpLeft [isLegalJump(MoveDirection.West) && getCurrentPawnColumn()==4] -> WestBorder;
       
            jumpRight [getCurrentPawnColumn() >=3 && getCurrentPawnColumn()<=5]-> MiddleEW;
            jumpLeft [isLegalJump(MoveDirection.West) && isLegalJump(MoveDirection.West) && getCurrentPawnColumn() >=5 && getCurrentPawnColumn() <=7]-> MiddleEW;
       
            stepRight [isLegalMove(MoveDirection.East) && getCurrentPawnColumn()==7] -> EastBorder;
            jumpRight [isLegalJump(MoveDirection.East) && getCurrentPawnColumn()==7] -> EastEdge;
            jumpRight [isLegalJump(MoveDirection.East) && getCurrentPawnColumn()==6] -> EastBorder;
       
            stepRight [isLegalMove(MoveDirection.East) && getCurrentPawnColumn() >=3 && Column() <=6]-> MiddleEW;
            stepLeft [ isLegalMove(MoveDirection.West) && getCurrentPawnColumn()>=4 && getCurrentPawnColumn()<=7]-> MiddleEW;     
       }
        

          EastBorder{
             stepLeft [isLegalMove(MoveDirection.West)]-> MiddleEW;
             stepRight [isLegalMove(MoveDirection.East)]-> EastEdge;
             jumpLeft [isLegalJump(MoveDirection.West)]-> MiddleEW;
        }
        
        EastEdge{
             stepLeft [isLegalMove(MoveDirection.West)]-> EastBorder;
             jumpLeft [isLegalJump(MoveDirection.West)]-> MiddleEW;
        }   
      }
   }
    Finished{  }    
  }



    // Returns the current row number of the pawn
    int getCurrentPawnRow() { 
    
    return 0; }
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { return 0; }
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    void illegalMove() { }
    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North};
}