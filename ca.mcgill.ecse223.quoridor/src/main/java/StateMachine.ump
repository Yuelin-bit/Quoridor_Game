namespace ca.mcgill.ecse223.quoridor.controller;
use QuoridorGame.ump;

class PawnBehavior {

   0..1 -> 0..1 Game   currentGame;
   0..1 -> 0..1 Player player;
	
 
  // TODO implement state machine of pawn
 PawnSM{
   
    Playing{
       finishGame -> Finished;
           
       NorthSouth{
      
          Setup{
              startGame [getPlayer().getGameAsWhite.equals(getCurrentGame())]->/ {startGame();}  SouthEdge;
          }
      
          SouthEdge{
            stepUp [isLegalMove(MoveDirection.North)]-> / {movePlayer (MoveDirection.North);} SouthBorder;     
            jumpUp [isLegalJump(MoveDirection.North)] -> /{jumpPawn(MoveDirection.North);} MiddleNS;
            stepDown -> / {illegalStep()} SouthEdge;
          }
      
          SouthBorder{
              stepUp [isLegalMove(MoveDirection.North)]->/{movePlayer (MoveDirection.North);}  MiddleNS;
              stepDown [isLegalMove(MoveDirection.South)]-> / {movePlayer(MoveDirection.South);} SouthEdge;
              jumpUp [isLegalJump(MoveDirection.North)] ->  / {jumpPawn(MoveDirection.North);} MiddleNS;
          }
      
        MiddleNS{
              stepUp   [isLegalMove(MoveDirection.North) && getCurrentPawnRow() ==3] ->/{movePlayer (MoveDirection.North);}  NorthBorder;
              jumpUp  [isLegalJump(MoveDirection.North) && getCurrentPawnRow() ==3] ->  / {jumpPawn(MoveDirection.North);}NorthEdge;
              jumpUp  [isLegalJump(MoveDirection.North) && getCurrentPawnRow() ==4] ->  / {jumpPawn(MoveDirection.North);}NorthBorder;
              stepUp [isLegalMove(MoveDirection.North) && getCurrentPawnRow()  >=4 && getCurrentPawnRow()  <=7]-> /{movePlayer (MoveDirection.North);}  MiddleNS;
              stepDown [isLegalMove(MoveDirection.South) && getCurrentPawnRow() ==7] -> / {movePlayer(MoveDirection.South);}SouthBorder;
              jumpDown [isLegalJump(MoveDirection.South) && getCurrentPawnRow() ==7] -> / {jumpPown(MoveDirection.South);} SouthEdge;
              jumpDown [isLegalJump(MoveDirection.South) && getCurrentPawnRow() ==6] ->/ {jumpPown(MoveDirection.South);} SouthBorder;
              stepDown[isLegalMove(MoveDirection.South) && getCurrentPawnRow()  >=3 && getCurrentPawnRow()  <=6] ->/ {movePlayer(MoveDirection.South);} MiddleNS;
              jumpUp[isLegalJump(MoveDirection.North) && getCurrentPawnRow()  >=5 && getCurrentPawnRow()  <=7] -> / {jumpPawn(MoveDirection.North);} MiddleNS;
              jumpDown[isLegalJump(MoveDirection.South) && getCurrentPawnRow()  >=3 && getCurrentPawnRow()  <=5] ->/ {jumpPown(MoveDirection.South);} MiddleNS;
        }
      
          NorthBorder{
              stepUp  [isLegalMove(MoveDirection.North) ] -> /{movePlayer (MoveDirection.North);}  NorthEdge;  
              stepDown [isLegalMove(MoveDirection.South)]-> / {movePlayer(MoveDirection.South);}MiddleNS;
              jumpDown [isLegalJump(MoveDirection.South)] -> / {jumpPown(MoveDirection.South);} MiddleNS;
         }
        
        NorthEdge{ 
            stepDown [isLegalMove(MoveDirection.South)] -> / {movePlayer(MoveDirection.South);}NorthBorder;
            jumpDown [isLegalJump(MoveDirection.South)]-> / {jumpPown(MoveDirection.South);} MiddleNS;
          stepUp -> / {illegalStep();} NorthEdge;
        }
      }
        
      ||
  
      EastWest{
   
          Setup{
                startGame -> MiddleEW;
          }
      
        WestEdge{
          stepRight [isLegalMove(MoveDirection.East)]-> /{movePlayer(MoveDirection.East);} WestBorder;
                jumpRight [isLegalJump(MoveDirection.East)]->/{jumpPawn(MoveDirection.East);} MiddleEW;
           stepLeft -> / {illegalStep();} WestEdge;
        }
    
        WestBorder{
              stepRight [isLegalMove(MoveDirection.East)]-> /{movePlayer(MoveDirection.East);} MiddleEW;
              jumpRight [isLegalJump(MoveDirection.East)]-> /{jumpPawn(MoveDirection.East);} MiddleEW;
              stepLeft [isLegalMove(MoveDirection.West)]-> /{movePlayer(MoveDirection.West);} WestEdge;
         
        }    
    
        MiddleEW{
       
            stepLeft [isLegalMove(MoveDirection.West) && getCurrentPawnColumn()==3] -> /{movePlayer(MoveDirection.West);} WestBorder;
            jumpLeft [isLegalJump(MoveDirection.West) && getCurrentPawnColumn()==3] ->/{jumpPawn(MoveDirection.West);} WestEdge;
            jumpLeft [isLegalJump(MoveDirection.West) && getCurrentPawnColumn()==4] -> /{jumpPawn(MoveDirection.West);} WestBorder;       
            jumpRight [getCurrentPawnColumn() >=3 && getCurrentPawnColumn()<=5]-> /{jumpPawn(MoveDirection.East);}MiddleEW;
            jumpLeft [isLegalJump(MoveDirection.West) && isLegalJump(MoveDirection.West) && getCurrentPawnColumn() >=5 && getCurrentPawnColumn() <=7]-> /{jumpPawn(MoveDirection.West);}  MiddleEW;      
            stepRight [isLegalMove(MoveDirection.East) && getCurrentPawnColumn()==7] -> /{movePlayer(MoveDirection.East);} EastBorder;
            jumpRight [isLegalJump(MoveDirection.East) && getCurrentPawnColumn()==7] -> /{jumpPawn(MoveDirection.East);} EastEdge;
            jumpRight [isLegalJump(MoveDirection.East) && getCurrentPawnColumn()==6] -> /{jumpPawn(MoveDirection.East);} EastBorder;      
            stepRight [isLegalMove(MoveDirection.East) && getCurrentPawnColumn() >=3 && Column() <=6]-> /{movePlayer(MoveDirection.East);}MiddleEW;
            stepLeft [ isLegalMove(MoveDirection.West) && getCurrentPawnColumn()>=4 && getCurrentPawnColumn()<=7]->/{movePlayer(MoveDirection.West);} MiddleEW;     
       }
        

          EastBorder{
             stepLeft [isLegalMove(MoveDirection.West)]->/{movePlayer(MoveDirection.West);} MiddleEW;
             stepRight [isLegalMove(MoveDirection.East)]-> /{movePlayer(MoveDirection.East);}EastEdge;
             jumpLeft [isLegalJump(MoveDirection.West)]-> /{jumpPawn(MoveDirection.West);}  MiddleEW;
        }
        
        EastEdge{
             stepLeft [isLegalMove(MoveDirection.West)]-> /{movePlayer(MoveDirection.West);} EastBorder;
             jumpLeft [isLegalJump(MoveDirection.West)]-> /{jumpPawn(MoveDirection.West);}  MiddleEW;
          stepRight -> / {illegalStep();} EastEdge;
          
        }   
      }
   }
    Finished { }    
  }

  boolean jumpPawn(MoveDirection dir){
  }
  
  boolean movePlayer(MoveDirection dir){
  }
  
  void startTheGame(){}

    // Returns the current row number of the pawn
    int getCurrentPawnRow() { return 0; }
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { return 0; }
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    void illegalStep() { }
    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North };
}
