namespace ca.mcgill.ecse223.quoridor.model;  

class PawnBehavior {

    //0..1 -> 0..1 Game currentGame;
   // 0..1 -> 0..1 Player player;

 
  // TODO implement state machine of pawn
      PawnSM{
    Playing{
       finishGame -> Finished;
      
      
    NorthSouth{
    Setup{startGame [getPlayer().getGameAsWhite.equals(getCurrentGame())]-> AtSouthEdge;
         startGame [getPlayer().getGameAsBlack().equals(getCurrentGame())] -> AtNorthEdge;}
        
    AtNorthEdge{
    moveUp-> /{illegalMove();} AtNorthEdge;   
      moveDown [isLegalMove(MoveDirection.South)&&!(isNextToPawnInDirection(MoveDirection.South))] ->AtNorthBorder;
      moveDown [isLegalMove(MoveDirection.South)&&(isNextToPawnInDirection(MoveDirection.South))] ->MiddleNS;
    }
        
    AtNorthBorder{
    moveUp-> /{illegalMove();} AtNorthEdge;  
     moveDown [isLegalMove(MoveDirection.South)] ->MiddleNS;}
        
    AtSouthEdge{
    moveUp[isLegalMove(MoveDirection.North)&&!(isNextToPawnInDirection(MoveDirection.North))] -> AtSouthBorder;     moveUp[isLegalMove(MoveDirection.North)&&isNextToPawnInDirection(MoveDirection.North)] -> MiddleNS;
      moveDown -> /{illegalMove();} AtSouthEdge;
    }
        
    AtSouthBorder{
    moveUp[isLegalMove(MoveDirection.North)] -> MiddleNS;
      moveDown[isLegalMove(MoveDirection.South)] -> AtSouthEdge;
    }
        
    MiddleNS{
    moveUp[isLegalMove(MoveDirection.North)&&!(isNextToPawnInDirection(MoveDirection.North))&&getCurrentPawnRow()==3] -> AtNorthBorder;
      moveUp[isLegalMove(MoveDirection.North)&&(isNextToPawnInDirection(MoveDirection.North))&&getCurrentPawnRow()==3] -> AtNorthEdge;
      moveUp[isLegalMove(MoveDirection.North)&&(isNextToPawnInDirection(MoveDirection.North))&&getCurrentPawnRow()==4] -> AtNorthBorder;
      moveUp -> MiddleNS;
      moveDown [isLegalMove(MoveDirection.South)&&!(isNextToPawnInDirection(MoveDirection.South))&&getCurrentPawnRow()==7] -> AtSouthBorder;
      moveDown [isLegalMove(MoveDirection.South)&&(isNextToPawnInDirection(MoveDirection.South))&&getCurrentPawnRow()==7] -> AtSouthEdge;
      moveDown [isLegalMove(MoveDirection.South)&&!(isNextToPawnInDirection(MoveDirection.South))&&getCurrentPawnRow()==6] -> AtSouthBorder;
      moveDown -> MiddleNS;
    }
  }
      
      ||
      
      EastWest{
   
      Setup{
        startGame -> MiddleEW;
        }
    
    AtEastBorder{}
    
    AtEastEdge{}
    
    AtWestBorder{}
    
    AtWestEdge{}
    
    MiddleEW{
    moveDown [isLegalMove(MoveDirection.West)&&!(isNextToPawnInDirection(MoveDirection.West))&&getCurrentPawnColumn()==3] -> AtWestBorder;
      moveDown [isLegalMove(MoveDirection.West)&&(isNextToPawnInDirection(MoveDirection.West))&&getCurrentPawnColumn()==3] -> AtWestEdge;
      moveDown [isLegalMove(MoveDirection.West)&&(isNextToPawnInDirection(MoveDirection.West))&&getCurrentPawnColumn()==4] -> AtWestBorder;
      moveDown -> MiddleNS;
      moveRight [isLegalMove(MoveDirection.East)&&!(isNextToPawnInDirection(MoveDirection.East))&&getCurrentPawnColumn()==7] -> AtEastBorder;
      moveRight [isLegalMove(MoveDirection.East)&&(isNextToPawnInDirection(MoveDirection.East))&&getCurrentPawnColumn()==7] -> AtEastEdge;
      moveRight [isLegalMove(MoveDirection.East)&&(isNextToPawnInDirection(MoveDirection.East))&&getCurrentPawnColumn()==6] -> AtEastBorder;
      moveRight -> MiddleNS;
      
    } 
       
  }
  
  
      
    }
    Finished{
    startGame -> Playing;
    }
        
        
      
  }



 
 // Returns the current row number of the pawn
    int getCurrentPawnRow() { return 0; }
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { return 0; }
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    void illegalMove() { }
    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North };
}